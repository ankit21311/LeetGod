class Solution {

    public boolean isAnagram(String s, String t) {
        int n1 = s.length(), n2 = t.length();
        if (n1 != n2) {
            return false;
        }

        int[] charCount = new int[26]; // Assuming the input only contains lowercase letters

        for (int i = 0; i < n1; i++) {
            charCount[s.charAt(i) - 'a']++;
            charCount[t.charAt(i) - 'a']--;
        }

        for (int count : charCount) {
            if (count != 0) {
                return false;
            }
        }

        return true;
    }
}




class Solution {

    public boolean isAnagram(String s, String t) {
        int n1 = s.length() , n2 = t.length() ;
        if(n1 != n2){
            return false ;
        }
        HashMap<Character,Integer> map = new HashMap<>() ;
        for(int i = 0 ; i<n1 ; i++){
            char ch = s.charAt(i) ;
            if(!map.containsKey(ch)){
                map.put(ch,0) ;
            }
            map.put(ch,map.get(ch)+1) ;
        }
        for(int i = 0 ; i<n2 ; i++){
            char ch = t.charAt(i) ;
            if(!map.containsKey(ch)){
                return false ;
            }
            map.put(ch,map.get(ch)-1) ;
        }
        for(int count : map.values()){
            if(count != 0){
                return false ;
            }
        }
        return true ;
    }
}




class Solution {

    public boolean isAnagram(String s, String t) {
        int n1 = s.length() , n2 = t.length() ;
        if(n1 != n2){
            return false ;
        }
        char[] ch1 = s.toCharArray() ;
        char[] ch2 = t.toCharArray() ;
        Arrays.sort(ch1) ;
        Arrays.sort(ch2) ;
        for(int i = 0 ; i<n1 ; i++){
            if(ch1[i] != ch2[i]){
                return false ;
            }
        }
        return true ;
    }
}
